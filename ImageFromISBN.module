<?php namespace ProcessWire;

class ImageFromISBN extends Process implements ConfigurableModule {
	public static function getModuleInfo() {
		return [
			'title' => 'Image from ISBN',
			'summary' => 'Get a book cover image from Open Library API with its ISBN and adds it to a page',
			'icon' => 'picture-o',
			'version' => '1.0.0',
			'author' => 'Alexandre Texier',
			'autoload' => true,
			'selectedTemplate' => '',
			'selectedImageField' => '',
			'selectedISBNField' => ''
		];
	}

	public function ready() {
		$this->pages->addHookAfter('save', function ($event) {
			$page = $event->arguments(0);
			//
			if ($page->template->id == $this->selectedTemplate) {
				$event->message("Image from ISBN handler");
				//
				$imagefield = $page->getField($this->selectedImageField);
				$isbnfield = $page->getField($this->selectedISBNField);
				//
				if ($page->$imagefield == '' && $page->$isbnfield != '') {
					$event->message("Fetching book cover");
					//
					// More about OpenLibrary API: https://openlibrary.org/dev/docs/api/covers
					$isbn = $page->$isbnfield;
					$coverURL = "https://covers.openlibrary.org/b/isbn/" . $isbn . "-L.jpg?default=false";
					//
					// begin curl
					$handle = curl_init($coverURL);
					curl_setopt($handle,  CURLOPT_RETURNTRANSFER, TRUE);
					// Get the HTML or whatever is linked in $url.
					$response = curl_exec($handle);
					// get url http code
					$httpCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);
					$event->message("http code = " . $httpCode);
					if ($httpCode == 200) {
						// Code is not a 200, the targeted cover exists, so adding it
						$event->message("Book cover found");
						$page->of(false);
						$page->$imagefield->add($coverURL);
						$page->save();
					} else {
						// code must be a 404
						$event->warning("Book cover not found");
					}
					// end curl
					curl_close($handle);
				} else {
					return;
				}
			} else {
				return;
			}
		});
	}

	public function getModuleConfigInputfields(InputfieldWrapper $inputfields) {
		//
		// Selected template for use by module
		$f = $this->modules->get('InputfieldSelect');
		$f->label = 'Selected Template';
		$f->description = 'Template where module will work, must contains fields specified below';
		$f->columnWidth = 100;
		$f->attr('name', 'selectedTemplate');
		$f->attr('value', $this->selectedTemplate);
		foreach ($this->templates as $t) {
			if (!($t->flags & Template::flagSystem)) {
				$f->addOption($t->id, $t->name);
			}
		}
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f);
		//
		// Selected imagefield for use by module
		$f = $this->modules->get('InputfieldSelect');
		$f->label = 'Selected Image Field';
		$f->description = 'Must be an image fieldtype with a max image size of 1';
		$f->columnWidth = 50;
		$f->attr('name', 'selectedImageField');
		$f->attr('value', $this->selectedImageField);
		foreach ($this->fields as $t) {
			if (!($t->flags & Field::flagSystem) && $t->type instanceof FieldtypeImage) {
				$f->addOption($t->id, $t->name);
			}
		}
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f);
		//
		// Selected isbn for use in
		$f = $this->modules->get('InputfieldSelect');
		$f->label = 'Selected ISBN Field';
		$f->description = 'Must a text fieldtype, optionnaly with ISBN regex patern';
		$f->columnWidth = 50;
		$f->attr('name', 'selectedISBNField');
		$f->attr('value', $this->selectedISBNField);
		foreach ($this->fields as $t) {
			if (!($t->flags & Field::flagSystem) && $t->type instanceof FieldtypeText) {
				$f->addOption($t->id, $t->name);
			}
		}
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f);
	}
}